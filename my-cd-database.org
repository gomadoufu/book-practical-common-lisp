**実践Common  lisp**
#+begin_src lisp
  (defmacro dbg (expr)
  `(let ((result ,expr))
     (format t "~&[DEBUG] ~S => ~S~%" ',expr result)
     result))
#+end_src

#+RESULTS:
: DBG

#+begin_src lisp :results output
  (defun hello-world ()
  (format t "Hello, world"))
  (dbg (hello-world))
#+end_src

#+RESULTS:
: Hello, world
: [DEBUG] (HELLO-WORLD) => NIL

* 第3章 実践:簡単なデータベース
** CDの曲を管理する簡単なデータベースを作成する。
**** リスト
#+begin_src lisp
(list 1 2 3)
#+end_src

#+RESULTS:
| 1 | 2 | 3 |

**** 属性リスト
#+begin_src lisp
  (getf (list :a 1 :b 2) :b)
#+end_src

#+RESULTS:
: 2
*** CDを表す属性リストを返す関数
#+begin_src lisp
  (defun make-cd (title artist rating ripped) (list :title title :artist artist :rating rating :ripped ripped))
#+end_src

#+RESULTS:
: MAKE-CD

*** データベースを格納するダイナミック変数と、それを操作する関数

グローバル変数には耳当てをつける
#+begin_src lisp
(defvar *db* nil)
#+end_src

#+RESULTS:
: *DB*

Create
#+begin_src lisp
  (defun add-record (cd) (push cd *db*))
  (add-record (make-cd "Beyond The Binary" "星宮とと, SOZEN OTSUBO" 7 t))
  (add-record (make-cd "Sakanaction" "サカナクション" 10 t))
  (add-record (make-cd "懐かしい月は新しい月" "サカナクション" 10 t))
  (add-record (make-cd "条理加速の片隅、彼女と想像の中身に関する行方 EP" "gaburyu" 8 t))
  (add-record (make-cd "NewJeans 2nd EP 'Get Up'" "NewJeans" 7 t))
  (add-record (make-cd "Perfume The Best 'P Cubed'" "Perfume" 9 t))
#+end_src

#+RESULTS:
| :TITLE | Perfume The Best 'P Cubed'                 | :ARTIST | Perfume               | :RATING |  9 | :RIPPED | T |
| :TITLE | NewJeans 2nd EP 'Get Up'                   | :ARTIST | NewJeans              | :RATING |  7 | :RIPPED | T |
| :TITLE | 条理加速の片隅、彼女と想像の中身に関する行方 EP | :ARTIST | gaburyu               | :RATING |  8 | :RIPPED | T |
| :TITLE | 懐かしい月は新しい月                         | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Sakanaction                                | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Beyond The Binary                          | :ARTIST | 星宮とと, SOZEN OTSUBO | :RATING |  7 | :RIPPED | T |
| :TITLE | 懐かしい月は新しい月                         | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Sakanaction                                | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Beyond The Binary                          | :ARTIST | 星宮とと, SOZEN OTSUBO | :RATING |  7 | :RIPPED | T |

Read
#+begin_src lisp
  (defun dump-db ()
    (dolist (cd *db*)
      (format t "~{~a:~10t~a~%~}~%" cd)))
#+end_src

#+RESULTS:
: DUMP-DB

*** ユーザインタラクションを改善する
~force-output~で、改行コードを待つことなくプロンプトが印字されるように保証する。
prompt-readの戻り値は最後のフォームの値、つまりREAD-LINEを呼び出した戻
り値であり、READ-LINEは読み込んだ文字列を値として返す。
#+begin_src lisp
  (defun prompt-read (prompt)
    (format *query-io* "~a: " prompt)
    (force-output *query-io*)
    (read-line *query-io*))
#+end_src

#+RESULTS:
: PROMPT-READ

値を順々に入力してもらいながら、新たなCDのレコードを生成する。

~PARSE-INTEGER~ 関数
- 文字列から数値が読み取れなかったり、数値でないゴミが混じっていると、エラーを通知するようになっている。 ~:junk-allowed~ に
~t~ をセットすると、エラーを抑制できる。
- 数字を1つも見つけられなかったり、文字列全部がゴミだったら、 ~nil~ を返
  すようになっている。 ~OR~ マクロを使って、nilなら0を返すようにする

~Y-OR-N-P~ 関数は、y, Y, n, Nで始まらない入力があるとユーザに再度入力を促す。
#+begin_src lisp
  (defun prompt-for-cd ()
    (make-cd
     (prompt-read "Title")
     (prompt-read "Artist")
     (or (parse-integer (prompt-read "Rating") :junk-allowed t) 0)
     (y-or-n-p "Ripped [y/n]")
     ))
#+end_src

#+RESULTS:
: PROMPT-FOR-CD

仕上げに、 ~prompt-for-cd~ をユーザの気の済むまでループする関数でラップ
すれば、インタフェースの完成
#+begin_src lisp
  (defun add-cds ()
        (loop (add-record (prompt-for-cd))
              (if (not (y-or-n-p "Another? [y/n]: ")) (return))))
#+end_src

#+RESULTS:
: ADD-CDS

*** データベースの保存と読み出し

~WITH-OPEN-FILE~ マクロ
1. ファイルをオープンする
2. それを対応するストリーム変数に束縛する
3. 実行し終わったらファイルをクローズする
~WITH_STANDARD_IO_SYNTAX~ マクロ
- ~PRINT~ の動作に影響を与える可能性のある変数が、標準的な値に設定された
  状態になることを保証する

#+begin_src lisp
           (defun save-db (filename)
             (with-open-file (out filename
                                  :direction :output
                                  :if-exists :supersede)
               (with-standard-io-syntax
                 (print *db* out))))
#+end_src

#+RESULTS:
: SAVE-DB

#+begin_src lisp
(save-db "/Users/gomadoufu/ghq/github.com/gomadoufu/book-practical-common-lisp/my-cds.db")
#+end_src

#+RESULTS:
| :TITLE | Perfume The Best 'P Cubed'                 | :ARTIST | Perfume               | :RATING |  9 | :RIPPED | T |
| :TITLE | NewJeans 2nd EP 'Get Up'                   | :ARTIST | NewJeans              | :RATING |  7 | :RIPPED | T |
| :TITLE | 条理加速の片隅、彼女と想像の中身に関する行方 EP | :ARTIST | gaburyu               | :RATING |  8 | :RIPPED | T |
| :TITLE | 懐かしい月は新しい月                         | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Sakanaction                                | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Beyond The Binary                          | :ARTIST | 星宮とと, SOZEN OTSUBO | :RATING |  7 | :RIPPED | T |
| :TITLE | 懐かしい月は新しい月                         | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Sakanaction                                | :ARTIST | サカナクション         | :RATING | 10 | :RIPPED | T |
| :TITLE | Beyond The Binary                          | :ARTIST | 星宮とと, SOZEN OTSUBO | :RATING |  7 | :RIPPED | T |

#+begin_src lisp
  (defun load-db (filename)
      (with-open-file (in filename)
        (with-standard-io-syntax
          (setf *db* (read in)))))
#+end_src

#+RESULTS:
: LOAD-DB

#+name: ファイルからロードする
#+begin_src lisp
(load-db "/Users/gomadoufu/ghq/github.com/gomadoufu/book-practical-common-lisp/my-cds.db")
#+end_src

#+RESULTS: ファイルからロードする
| :TITLE | Perfume The Best 'P Cubed'                | :ARTIST | Perfume               | :RATING |  9 | :RIPPED | T |
| :TITLE | NewJeans 2nd EP 'Get Up'                  | :ARTIST | NewJeans              | :RATING |  7 | :RIPPED | T |
| :TITLE | 条理加速の片隅、彼女と想像の中身に関する行方 EP | :ARTIST | gaburyu               | :RATING |  8 | :RIPPED | T |
| :TITLE | 懐かしい月は新しい月                         | :ARTIST | サカナクション          | :RATING | 10 | :RIPPED | T |
| :TITLE | Sakanaction                               | :ARTIST | サカナクション          | :RATING | 10 | :RIPPED | T |
| :TITLE | Beyond The Binary                         | :ARTIST | 星宮とと, SOZEN OTSUBO | :RATING |  7 | :RIPPED | T |
*** データベースにクエリを投げる
~REMOVE-IF-NOT~ 関数は述語とリストを引数にとって、述語を成立させる要素だけを含む新しいリストを返す。
~#'~ は、その後に来る識別子が変数ではなく関数であることを意味する。
#+begin_src lisp 
  (remove-if-not #'(lambda (cd) (equal (getf cd :artist) "サカナクション")) *db*)
#+end_src

#+RESULTS:
| :TITLE | 懐かしい月は新しい月 | :ARTIST | サカナクション | :RATING | 10 | :RIPPED | T |
| :TITLE | Sakanaction       | :ARTIST | サカナクション | :RATING | 10 | :RIPPED | T |

いろんなセレクタを引数に取る関数 select
#+begin_src lisp
  (defun select (selector-fn)
    (remove-if-not selector-fn *db*))
#+end_src

#+RESULTS:
: SELECT

アーティストセレクタ
#+begin_src lisp
  (defun artist-selector (artist)
    #'(lambda (cd) (equal (getf cd :artist) artist)))
#+end_src

#+RESULTS:
: ARTIST-SELECTOR

select関数の呼び出し
#+begin_src lisp
  (select (artist-selector "サカナクション"))
#+end_src

#+RESULTS:
| :TITLE | 懐かしい月は新しい月 | :ARTIST | サカナクション | :RATING | 10 | :RIPPED | T |
| :TITLE | Sakanaction       | :ARTIST | サカナクション | :RATING | 10 | :RIPPED | T |

汎用セレクタ関数生成機 where。
関数の引数リストの先頭に ~&key~ とつけることで、以降の引数を **キーワードパラメータ** にすることができる。
キーワードパラメータを使うと、引数を好きな順序で呼び出せるようになる。
また、引数に値を与えなくても関数が動作するようになる。値を与えなかった場合、そこは ~NIL~ になる。
さらに引数にはデフォルト引数を指定できるほか、値として与えた ~NIL~ と値が与えられなかった ~NIL~ を区別するための
パラメータ ~supplied-p~ を付与することもできるようになる。
#+begin_src lisp
  (defun where (&key title artist rating (ripped nil ripped-p))
    #'(lambda (cd)
        (and
         (if title (equal (getf cd :title) title) t)
         (if artist (equal (getf cd :artist) artist) t)
         (if rating (equal (getf cd :rating) rating) t)
         (if ripped-p (equal (getf cd :ripped) ripped) t))))
#+end_src

#+RESULTS:
: WHERE

*** 既存のレコードを更新する
レコードを更新する update 関数
#+begin_src lisp
  (defun update (selector-fn &key title artist rating (ripped nil ripped-p))
     (setf *db*
         (mapcar
          #'(lambda (row)
              (when (funcall selector-fn row)
                 (if title (setf (getf row :title) title))
                 (if artist (setf (getf row :artist) artist))
                 (if rating (setf (getf row :rating) rating))
                 (if ripped-p (setf (getf row :ripped) ripped)))
              row)
          *db*)))
#+end_src

#+RESULTS:
: UPDATE

#+begin_src lisp
  (update (where :artist "サカナクション") :rating 11)
#+end_src

#+RESULTS:
| :TITLE | Perfume The Best 'P Cubed'                | :ARTIST | Perfume               | :RATING |  9 | :RIPPED | T |
| :TITLE | NewJeans 2nd EP 'Get Up'                  | :ARTIST | NewJeans              | :RATING |  7 | :RIPPED | T |
| :TITLE | 条理加速の片隅、彼女と想像の中身に関する行方 EP | :ARTIST | gaburyu               | :RATING |  8 | :RIPPED | T |
| :TITLE | 懐かしい月は新しい月                         | :ARTIST | サカナクション          | :RATING | 11 | :RIPPED | T |
| :TITLE | Sakanaction                               | :ARTIST | サカナクション          | :RATING | 11 | :RIPPED | T |
| :TITLE | Beyond The Binary                         | :ARTIST | 星宮とと, SOZEN OTSUBO | :RATING |  7 | :RIPPED | T |

既存のレコードを削除する
#+begin_src lisp
    (defun delete-rows (selector-fn)
      (setf *db* (remove-if selector-fn *db*)))
#+end_src

#+RESULTS:
: DELETE-ROWS

*** ムダを排除して勝利を収める
マクロの話が出てきた！
- 「CやC++におけるテキストベースのマクロとCommon Lispのマクロとは、名前以外に本質的に何も共有しているものはない」
  - Rustの健全な(?)マクロとは似ているところがあるのかも
- 「Lispのマクロの本質は、自動的なコードジェネレータだ」
#+name: 初めてのマクロ
#+begin_src lisp :results output
  (defmacro backwards (expr) (reverse expr))
  (backwards ("hello, world" t format))
#+end_src

  #+RESULTS: 初めてのマクロ
  : hello, world

シングルクォートをつけると、Lispにそのフォームを評価することをやめさせることができる。
またバッククォートをつけると、クォートと同じように全体が評価されなくなるが、コンマが前に置かれた部分式だけは評価されるようになる。
#+begin_src lisp :results scalar
    (defun make-comparison-expr (field value)
      (list 'equal (list 'getf 'cd field value)))

    (defun make-comparison-expr (field value)
      `(equal (getf cd ,field) ,value))

    (make-comparison-expr :rating 10)
#+end_src

#+RESULTS:
: (EQUAL (GETF CD :RATING) 10)

~LOOPマクロ~ を使ってみよう
#+begin_src lisp
      (defun make-comparisons-list (fields)
        (loop while fields
              collecting (make-comparison-expr (pop fields) (pop fields))))
#+end_src

#+RESULTS:
: MAKE-COMPARISONS-LIST

whereをマクロで置き換える
- ~,@~ は、続く式を評価して、それを取り囲んでいるリストと繋ぎ合わせる。
- ~&rest~ があると関数やマクロは任意個数の引数を取れるようになり、それらのリストが単一の実引数になる。
#+begin_src lisp
    (defmacro where (&rest clauses)
      `#'(lambda (cd) (and ,@(make-comparisons-list clauses))))
#+end_src

#+RESULTS:
: WHERE

~MACROEXPAND-1~ を使うと、マクロを展開してチェックできる。
#+begin_src lisp :results scalar
  (macroexpand-1 '(where :title "Beyond The Binary" :ripped t))
#+end_src

#+RESULTS:
: #'(LAMBDA (CD)
:     (AND (EQUAL (GETF CD :TITLE) "Beyond The Binary")
:          (EQUAL (GETF CD :RIPPED) T)))
: T

whereマクロを実際に使ってみよう！
#+begin_src lisp
  (select (where :title "Beyond The Binary" :ripped t))
#+end_src

#+RESULTS:
| :TITLE | Beyond The Binary | :ARTIST | 星宮とと, SOZEN OTSUBO | :RATING | 7 | :RIPPED | T |

* 第4章 シンタックスとセマンティクス
** S式
以下のどちらかのこと。
- リスト
  - カッコで括られている
  - 空白で区切って、いくつでもS式を含められる
- アトム
  - リスト以外の、コメントをのぞいた全て。
** アトムの種類
- 数値
  - 整数、分数、浮動小数点数、複素数がある
- 文字列
  - ダブルクォートでくくる
  - バックスラッシュは次の文字をエスケープし、それが何であろうと文字列中に含まれるようにする。
    - ダブルクォートとバックスラッシュの2つだけは、文字列の中で必ずエスケープしなければならない。
- シンボル
  - ~FORMAT~ や ~hello-world~ や ~*db*~ といった、「名前」。
  - カッコやクォート類、カンマやコロン、バックスラッシュはエスケープすれば、シンボルの一部として使える
  - リストの読み取り機は、エスケープされていないシンボルを、全て大文字に変換する。
  - シンボルの命名規約
    - ハイフンがよく使われる
    - ダイナミック変数の先頭と末尾に ~*~ をつける
    - 定数の先頭と末尾に ~+~ をつける
    - 下位層の関数の先頭に ~%~ をつけるLisperもいるらしい
** LispフォームとしてのS式
アトムは2種類に分類できる
- シンボル
  - 変数の名前とみなされ、その変数の現在の値として評価される。
- それ以外
  - 自己評価型 (*self-evaluating*)のオブジェクト。
  - 数値や文字列など、評価器に渡すとそれ自身が帰ってくるもののこと。

シンボルも、変数の名前に代入すれば自己評価型になる。
~T~ や ~NIL~ はこの形式で定義されている。
キーワード引数で使われる **キーワードシンボル** ~:symbol~ も、同じく自己評価型になるシンボルで、
その名前の定数が自動的に定義される。

正規のリストフォームは、すべてシンボルで始まり、
評価のされかたによって3種類に分けられる。
- 関数呼び出しフォーム
- マクロフォーム
- 特殊フォーム
** 特殊オペレータ
すべての操作を関数として定義できるわけではない。例えば関数では、 ~IF~ を定義できない。
なぜなら関数は左から、そして内側から評価されてしまうから。
以下の ~IF~ がもし関数なら、 ~x~ が何であれ、常に yes no が表示され、それから ~IF~ の評価が始まってしまい、
期待する動作にならない。
#+begin_src lisp
  (if x (format t "yes") (format t "no"))
#+end_src
この問題を解決するため、Common Lispには関数ができないことをするための **特殊オペレータ** が25個ある。
リストの先頭が特殊オペレータの名前だった場合、式の残りはその特殊オペレータのルールに従って評価される。
** マクロ
ユーザに対して、Lispのシンタックスを拡張する手段を提供するのがマクロ。
マクロは「S式を引数に取って、そのマクロフォームの代わりに評価されるLispフォームを返す関数」と考えることができる。
- マクロはコンパイル時に展開される。
- 評価器は、マクロがマクロ関数に渡る前にマクロフォームの要素を評価することはない。
  よって、マクロフォームはきちんとしたLispフォームでなくても良い。
- ループ構文はいつだってマクロだ。
** 真、偽、そして等しさ
*** 真偽値
Common Lispにおいては、 ~NIL~ だけが唯一の偽の値で、他のあらゆるものが真。
標準の真の値はシンボル ~T~ で、具体的な値を持たない 非NIL として使われる。

~NIL~ はアトムでもありリストでもあり(Common Lispでこの特徴を持つのはNILだけ)、空リストを表すのにも使われる。
また、読取器は空リストを見ると ~NIL~ として読む。
~nil~ = ~()~ = ~'nil~ = '()
*** 同一性の判定
Common Lispには、等価性を判定する述語が型ごとに用意されている。
例えば数値の比較には ~=~ を使い、文字の比較には ~CHAR=~ を使う。

Lispオブジェクト全般に使える、等価性判定の総称的な述語が4つある
- EQ
  - 「オブジェクト同一性」(object identity)を比較する。
  - ただし数や文字のオブジェクト同一性は、処理系でそれらの型がどのように実装されているかに依存する
  - 数値や文字になり得る値の比較には、 ~EQ~ を使うべきではない。
- EQL
  - ~EQL~ は ~EQ~ と同じようにオブジェクト同一性を判定する述語だが、同じ数値や文字の値を表している同じクラスの
    同じオブジェクトは、常に等しいと判定されると保証されている
  - 色々なスタイルがあるが、この本では *比較には常に ~EQL~ を使う* 。
- EQUAL
  - ~EQL~ より等価性の判定基準が甘く、異なるオブジェクトでも等しいとみなされる
  - 文字列や配列、パス名について、ぱっと見で等しそうなら真になる。
  - その他のデータ型については ~EQL~ を使って判定される。
- EQUALP
  - ~EQUAL~ よりさらに判定基準が甘い。
  - 文字列は、大文字小文字の違いがあっても等しいとみなされる
  - 数値は、数学的に同じなら等しいとみなされる。 ~(equalp 1 1.0)~ は真。
  - ~EQUALP~ からなるリスト同士は ~EQUALP~ であり、 ~EQUAL~ からなる配列も ~EQUALP~ である
  - その他のデータ型については ~EQL~ を使って判定される。
** Lispコードの書式
インデントは、コードの構造を反映したものにする。
括弧を書き間違えると、自動フォーマットしたときにインデントがおかしくなるので、気づけるはず(とのこと)。
- 意味的に同じだが改行が必要な場合は、同じレベルのインデントにする
- 関数・マクロ・特殊フォームは、本体をスペース2つ分インデントする
- *閉じ括弧は、閉じようとするリストの最後の要素と同じ行に書くこと。*
- コメント 1~4つのセミコロンを使う
  - セミコロン4つはファイルヘッダ
  - セミコロン3つは意味段落で使う
  - セミコロン1つは、文末の1行コメント
* 第5章 関数
** 新しい関数の定義
関数は ~defun~ マクロを使って定義される。
#+begin_src lisp :eval no
      (defun name (parameter*)
        "省略可能なドキュメンテーション文字列"
        body-form*)
#+end_src

*name* には、どんなシンボルでも使える。
- 変換系の関数には、よく ~string->widget~ のような名前がつけられる
- スネークケースやキャメルケース・パスカルケースではなく、ハイフンを使ったケバブケースで命名する。
  
*parameter* のリストは、関数を呼ぶときに渡す引数を保持するのに使う変数を定義する。以下のように色々種類がある
- 必須パラメータ
- オプショナルパラメータ
- マルチプルパラメータ
- キーワードパラメータ

パラメータリストの後に続く文字列リテラルは、関数の目的を説明する *ドキュメント* になる。
この文字列は関数の名前と自動的に対応づけられ、後で ~DOCUMENTATION~ 関数で取り出すことができる。

*body-form* は任意の個数のLisp式で構成される。
これらは関数が呼び出されるときに順番に評価され、最後の式の値が関数の値として返される。
最後の値を戻り値にしたくないときには、 ~RETURN-FROM~ という特殊オペレータを使ってreturnすることもできる。
** 関数のパラメータリスト
*** 必須パラメータ
パラメータリストが単純に、変数の名前からなるリストの時、そのパラメータを *必須パラメータ* と呼ぶ。
関数が呼び出される時、必須パラメータには、対応する実引数が必要になる。
必須パラメータと実引数の数が合わないと、Lispはエラーを通知する。
*** オプショナルパラメータ
関数呼び出しをするときに、一部の引数は適当なデフォルト値にして、関数側ででうまくやってほしい場面がある。
オプショナルパラメータを使うと、細かい値を気にしない呼び出し元に対しては適当なデフォルト値にして、
そうでない呼び出し元からは特定の値を受け取れるようにできる。

オプショナルパラメータ付きの関数を定義するには、すべての必須パラメータの *後に、*
~&optional~ というシンボルを置き、その後にオプショナルパラメータの名前を続ける。
#+begin_src lisp
  (defun foo (a b &optional c d) (list a b c d))
#+end_src

#+RESULTS:
: FOO

この関数が呼ばれたとき、引数は最初に必須パラメータに束縛され、さらに引数が残っていたら、
その値はオプショナルパラメータに束縛される。引数が残っていなければ、オプショナルパラメータは ~NIL~ になる。

#+begin_src lisp :results output
  (dbg (foo 1 2))
#+end_src

#+RESULTS:
: [DEBUG] (FOO 1 2) => (1 2 NIL NIL)

#+begin_src lisp :results output
  (dbg (foo 1 2 3))
#+end_src

#+RESULTS:
: [DEBUG] (FOO 1 2 3) => (1 2 3 NIL)

#+begin_src lisp :results output
  (dbg (foo 1 2 3 4))
#+end_src

#+RESULTS:
: [DEBUG] (FOO 1 2 3 4) => (1 2 3 4)


~NIL~ 以外のデフォルト値を指定するには、パラメータの名前の代わりに、名前とデフォルト値からなるリストを指定する。
#+begin_src lisp
  (defun foo (a &optional (b 10)) (list a b))
#+end_src

#+RESULTS:
: FOO

#+begin_src lisp :results output
  (dbg (foo "hello"))
#+end_src

#+RESULTS:
: [DEBUG] (FOO "hello") => ("hello" 10)

#+begin_src lisp :results output
  (dbg (foo "hello" "world"))
#+end_src

#+RESULTS:
: [DEBUG] (FOO "hello" "world") => ("hello" "world")

デフォルト値を設定する式では、すでにパラメータリストに登場している値を参照できる。
例えば矩形を描画する関数を書いているとして、特に正方形を手軽に描画したいとすると、こんなふうに書ける。
#+begin_src lisp :eval no
  (defun make-rectangle (width &optional (height width)) ...)
#+end_src


パラメータを指定するリストのデフォルト値の式の後に追加の変数を設定すると、オプショナル引数の実引数が
デフォルト値なのかカスタムの値なのかを判定できる。
#+begin_src lisp
  (defun foo (a b &optional (c 3 c-supplied-p))
    (list a b c c-supplied-p))
#+end_src

#+RESULTS:
: FOO

この関数では、 ~c~ がカスタムの値なら ~c-supplied-p~ が真に、そうでなければ ~NIL~ に束縛される。
このように使う変数の名前は、実際のパラメータの名前に ~-supplied-p~ をつけたものにするのが慣例。
#+begin_src lisp :results output
  (dbg (foo 1 2))
#+end_src

#+RESULTS:
: [DEBUG] (FOO 1 2) => (1 2 3 NIL)

#+begin_src lisp :results output
  (dbg (foo 1 2 100))
#+end_src

#+RESULTS:
: [DEBUG] (FOO 1 2 100) => (1 2 100 T)

*** レストパラメータ
必須パラメータとオプショナルパラメータに割り当てた後の残りの引数を、
シンボル ~&rest~ の後ろのパラメータにまとめることができる。
これはレストパラメータと呼ばれ、この残りの引数はリストとしてまとめられる。
レストパラメータを使うと、可変長引数を実現できる。
#+begin_src lisp
  (defun my+ (&rest numbers)
  (if (null numbers)
      0
      (+ (car numbers) (apply #'my+ (cdr numbers)))))
  (dbg (my+ 1 2 3))
#+end_src

#+RESULTS:
: MY+

*** キーワードパラメータ
キーワードパラメータを使うと、オプショナルパラメータよりももっと柔軟に、指定した位置の引数にだけ値を渡すことができる。
関数にキーワードパラメータを設定するには、必須パラメータと ~&optional~ および ~&rest~ の各パラメータの後に、
 ~&key~ というシンボルと任意の数の識別子を、リストとしてまとめておく。
#+begin_src lisp :eval no
  (defun foo (&key a b c) (list a b c))
#+end_src

各キーワードパラメータは同じ名前のキーワードの直後の値に束縛される。もし与えられたキーワードに対応する実引数が
与えられなかったら、対応するパラメータにはデフォルト値が割り当てられる。
デフォルト値の指定方法まわりは、オプショナルパラメータと同様。 ~-supplied-p~ も使える。
#+begin_src lisp
  (defun foo (&key (a 0) (b 0 b-supplied-p) (c (+ a b)))
    (list a b c b-supplied-p))
#+end_src

#+RESULTS:
: FOO

#+begin_src lisp :results output
  (dbg (foo :a 1 :c 3))
#+end_src

#+RESULTS:
: [DEBUG] (FOO :A 1 :C 3) => (1 0 3 NIL)

#+begin_src lisp :results output
  (dbg (foo :a 1 :c 3 :b 2))
#+end_src

#+RESULTS:
: [DEBUG] (FOO :A 1 :C 3 :B 2) => (1 2 3 T)

** 関数の戻り値
デフォルトでは、関数の最後の式を評価した値が、その関数の戻り値になる。
アーリーリターンしたい時は、特殊オペレータ ~RETURN-FROM~ が使える。
~RETURN-FROM~ はブロックから抜けるためのもので、関数と直接関係があるわけではない。
#+begin_src lisp :eval no
  (defun foo (n)
    (dotimes (i 10)
      (dotimes (j 10)
        (when (> (* i j) n)
          (return-from foo (list i j)))))
#+end_src

** データとしての関数または高階関数
*** 関数オブジェクトの取得
Lispでは、関数はオブジェクトの一種でしかない。関数を ~DEFUN~ で定義する時には、実際には2つのことをやっている。
- 新しい関数オブジェクトの生成
- そのオブジェクトに名前をつけること
  関数オブジェクトを得る仕組みは ~FUNCTION~ という特殊オペレータが提供する。
~FUNCTION~ は引数を1つ取り、引数の名前を持つ関数オブジェクトを返す。
#+begin_src lisp :results output
  (defun foo (x) (* 2 x))
  (dbg (function foo))
#+end_src

#+RESULTS:
: [DEBUG] #'FOO => #<FUNCTION FOO>

また、 ~#'~ と書くことで、 ~FUNCTION~ と同じ効果を得られる。
#+begin_src lisp
  #'foo
#+end_src

#+RESULTS:
: #<FUNCTION FOO>

*** 関数オブジェクトの起動
関数オブジェクトを手に入れたら、それを起動する必要がある。起動の仕方は2種類ある
- ~FUNCALL~
- ~APPLY~
両者は、呼び出す関数への引数の渡し方に違いがある。

**** FUNCALL
~FUNCALL~ は、渡す引数の個数が静的に判明しているときに使う。
#+begin_src lisp :results output
  (dbg (foo 2))
  (dbg (funcall #'foo 2))
#+end_src

#+RESULTS:
: [DEBUG] (FOO 2) => 4
: [DEBUG] (FUNCALL #'FOO 2) => 4

#+begin_src lisp :results output
  (defun plot (fn min max step)
    (loop for i from min to max by step do
      (loop repeat (funcall fn i) do (format t "*"))
      (format t "~%")))
  (plot #'exp 0 4 1/2)
#+end_src

#+RESULTS:
: *
: **
: ***
: *****
: ********
: *************
: *********************
: **********************************
: *******************************************************

**** APPLY
~FUNCALL~ は、引数リストが実行時にしかわからない場合には使いづらい。
そのような場合には、引数リストをそのまま渡せる ~APPLY~ を使う。
#+begin_src lisp :eval no
  (apply #'plot plot-data)
#+end_src

~APPLY~ は、適用される関数のとる引数が ~&optional~ なのか ~&rest~ なのか ~&key~ なのかは気にしない。
引数の数だけ気にする。

** 無名関数

